//
//  Equation.swift
//
//  Created by Evan Anderson on 4/6/23.
//

import Foundation
import HugeNumbers
import SwiftUnits

package enum Equation {
}

package extension Equation {
    enum Energy {
        /// Calculates the power (energy per unit time) converted from electrical energy to thermal energy (direct current)
        /// - Parameters:
        ///     - current: current travelling through the resistor or other element
        ///     - resistance: electrical resistance
        /// - Returns: power of heating generated by an electrical conductor
        static func joule_heating_dc(current: HugeFloat, resistance: HugeFloat) -> HugeFloat {
            return (current * current) * resistance
        }
        /// Alternating Current.
        static func joule_heating_ac(current: HugeFloat, resistance: HugeFloat) {
        }
        
        /// Static electrical resistance of an object.
        static func resistance(voltage: ElectricPotentialUnit, current: ElectricCurrentUnit) -> ElectricResistanceUnit {
            let voltage:HugeFloat = voltage.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricPotentialUnitType.volt)
            let current:HugeFloat = current.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricCurrentUnitType.ampere)
            return ElectricResistanceUnit(type: ElectricResistanceUnitType.ohm, value: voltage / current)
        }
        /// Static electrical conductance of an object.
        static func conductance(voltage: ElectricPotentialUnit, current: ElectricCurrentUnit) -> ElectricResistanceUnit {
            let voltage:HugeFloat = voltage.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricPotentialUnitType.volt)
            let current:HugeFloat = current.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricCurrentUnitType.ampere)
            return ElectricResistanceUnit(type: ElectricResistanceUnitType.ohm, value: current / voltage)
        }
        
        static func voltage(current: ElectricCurrentUnit, resistance: ElectricResistanceUnit) -> ElectricPotentialUnit {
            let current:HugeFloat = current.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricCurrentUnitType.ampere)
            let resistance:HugeFloat = resistance.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricResistanceUnitType.ohm)
            return ElectricPotentialUnit(type: ElectricPotentialUnitType.volt, value: current * resistance)
        }
        
        static func current(voltage: ElectricPotentialUnit, resistance: ElectricResistanceUnit) -> ElectricCurrentUnit {
            let voltage:HugeFloat = voltage.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricPotentialUnitType.volt)
            let resistance:HugeFloat = resistance.convert_value_to_unit(prefix: UnitPrefix.normal, ElectricResistanceUnitType.ohm)
            return ElectricCurrentUnit(type: ElectricCurrentUnitType.ampere, value: voltage / resistance)
        }
    }
}
